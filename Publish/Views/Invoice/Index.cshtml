@using System.Collections
@using BMS.Resource
@{
    ViewBag.Title = "Invoicing";
}
<div class="row">
    <div class="col-md-5">
        <div class="row">
            <div class="col-md-12">
                @(Html.Kendo().Grid<BMS.Entity.BMSTenant.InvoiceHeader>()
                  .Name("gInvoiceHeader")
                  .Columns(columns =>
                  {
                      columns.Bound(c => c.InvoiceNo);
                      columns.Bound(c => c.Date).Width(100).Format("{0:d}").EditorTemplateName("Date");
                      columns.Bound(c => c.Finalized).Width(100);
                      columns.Command(command => { command.Destroy().Text(Resource.Delete).Text("Delete"); }).Width(95);
                  })
                  .ToolBar(toolbar =>
                  {
                      toolbar.Template("<span style=\"float:left;font-size:18px;padding:4px;\">Invoices</span>" +
                                 "<a class=\"k-button k-button-icontext k-grid-add\" href=\"/data/InvoiceHeaders/GetInvoiceHeaders\"><span class=\"k-icon k-add\"></span>Add</a>" +
                                 "<a class=\"k-button k-button-icontext k-grid-save-changes\" href=\"javascript:void(0)\"><span class=\"k-icon k-update\"></span>Save</a>" +
                                 "<a class=\"k-button k-button-icontext k-grid-cancel-changes\" href=\"javascript:void(0)\"><span class=\"k-icon k-cancel\"></span>Cancel</a>");
                  })
                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                  .Pageable()
                  .Navigatable()
                  .Selectable(selectable =>
                  {
                      selectable.Mode(GridSelectionMode.Single);
                      selectable.Type(GridSelectionType.Row);
                  })
                  .Sortable(sortable =>
                  {
                      sortable.SortMode(GridSortMode.MultipleColumn);
                  })
                  .Filterable()
                  .DataSource(dataSource => dataSource
                      .WebApi()
                      .PageSize(11)
                      .Model(model => model.Id(p => p.Id))
                      .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceHeaders", action = "GetInvoiceHeaders" })))
                      .Create(create => create.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceHeaders", action = "PostInvoiceHeader" })))
                      .Update(update => update.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceHeaders", action = "PutInvoiceHeader", id = "{0}" })))
                      .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceHeaders", action = "DeleteInvoiceHeader", id = "{0}" })))

                  )
                  .Pageable(p => p.Refresh(true))
                  .Events(e => e.Change("gInvoiceHeaderOnChange").DataBound("gInvoiceHeaderOnDataBound").Save("gInvoiceHeaderOnSave").Remove("gInvoiceHeaderOnRemove"))
                )
            </div>
        </div>
    </div>
    <div class="col-md-7">
        <div class="row">
            <div class="col-md-12">
                @(Html.Kendo().Grid<BMS.Entity.BMSTenant.InvoiceLine>()
                  .Name("gInvoiceLine")
                  .Columns(columns =>
                  {
                      columns.ForeignKey(c => c.ItemId, (IEnumerable)ViewData["Items"], "Id", "Value").ClientFooterTemplate("Total : #=count#").Title(Resource.Item);
                      //columns.Bound(c => c.CurrentStockQuantity).Title("StockQ").Filterable(false).Width(100).HtmlAttributes(new {style="text-align:right;"});
                      columns.Bound(c => c.Case).ClientFooterTemplate("#=sum#").EditorTemplateName("PossitiveInteger").Width(60).HtmlAttributes(new { style = "text-align:right;" });
                      columns.Bound(c => c.Piece).ClientFooterTemplate("#=sum#").EditorTemplateName("PossitiveInteger").Width(60).HtmlAttributes(new { style = "text-align:right;" });
                      columns.Bound(c => c.FreeCase).Title("FreeC").ClientFooterTemplate("#=sum#").EditorTemplateName("PossitiveInteger").Width(60).HtmlAttributes(new { style = "text-align:right;" });
                      columns.Bound(c => c.FreePiese).Title("FreeP").ClientFooterTemplate("#=sum#").EditorTemplateName("PossitiveInteger").Width(60).HtmlAttributes(new { style = "text-align:right;" });
                      columns.Command(command => { command.Destroy().Text(Resource.Delete); }).Width(95);
                  })
                  .ToolBar(toolbar =>
                  {
                      toolbar.Template("<span style=\"float:left;font-size:18px;padding:4px;\">Lines</span>" +
                                 "<a class=\"k-button k-button-icontext k-grid-add\" href=\"/data/InvoiceLines/GetInvoiceLines\"><span class=\"k-icon k-add\"></span>Add</a>" +
                                 "<a class=\"k-button k-button-icontext k-grid-save-changes\" href=\"javascript:void(0)\"><span class=\"k-icon k-update\"></span>Save</a>" +
                                 "<a class=\"k-button k-button-icontext k-grid-cancel-changes\" href=\"javascript:void(0)\"><span class=\"k-icon k-cancel\"></span>Cancel</a>");
                  })
                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                  .Pageable()
                  .Navigatable()
                  .Selectable(selectable =>
                  {
                      selectable.Mode(GridSelectionMode.Single);
                      selectable.Type(GridSelectionType.Row);
                  })
                  .Sortable(sortable =>
                  {
                      sortable.SortMode(GridSortMode.MultipleColumn);
                  })
                  //.Filterable()
                  .DataSource(dataSource => dataSource
                      .WebApi()
                      .PageSize(10)
                      .Model(model =>
                      {
                          model.Id(p => p.Id);
                          model.Field(x => x.CurrentStockQuantity).Editable(false);
                      })
                      .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceLines", action = "GetInvoiceLines" })).Data("gInvoiceLineReadData"))
                      .Create(create => create.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceLines", action = "PostInvoiceLine" })).Data("gInvoiceLineCreateData"))
                      .Update(update => update.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceLines", action = "PutInvoiceLine", id = "{0}" })))
                      .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "InvoiceLines", action = "DeleteInvoiceLine", id = "{0}" })))
                      .Aggregates(a =>
                      {
                          a.Add(x => x.ItemId).Count();
                          a.Add(x => x.Case).Sum();
                          a.Add(x => x.Piece).Sum();
                          a.Add(x => x.FreeCase).Sum();
                          a.Add(x => x.FreePiese).Sum();
                      })
                  )
                  .Pageable(p => p.Refresh(true).ButtonCount(5).PageSizes(new[] { 10, 25, 50, 100 }))
                .Events(e => e.SaveChanges("gInvoiceLineOnSaveChanges")
                .Remove("gInvoiceLineOnRemove")
                .Edit("gInvoiceLineOnEdit")
                )
                )
            </div>
        </div>
    </div>
</div>

<script>
    var gInvoiceLineReadData = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        return {
            headerId: grid.select().length == 1 ? grid.dataItem(grid.select()).Id : 0
        }
    }

    var gInvoiceLineCreateData = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        e.InvoiceHeaderId = grid.select().length == 1 ? grid.dataItem(grid.select()).Id : 0;
    }

    var gInvoiceHeaderOnChange = function (e) {
        $("#gInvoiceLine").data("kendoGrid").dataSource.read();
    }

    var gInvoiceHeaderOnSave = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        if (grid.select().length == 1 && grid.dataItem(grid.select()).Finalized) {
            notify('You cannot change finalized invoice.', 'error');
            e.preventDefault();
        }
    }

    var gInvoiceHeaderOnRemove = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        if (grid.select().length == 1 && grid.dataItem(grid.select()).Finalized) {
            notify('You cannot change finalized invoice.', 'error');
            e.preventDefault();
            grid.dataSource.read();
        }
    }

    var gInvoiceLineOnEdit = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        if (grid.select().length == 1 && grid.dataItem(grid.select()).Id == 0) {
            notify('You have to save the header details first.', 'error');
            e.preventDefault();
            $("#gInvoiceLine").data("kendoGrid").dataSource.read();
        }
    }

    var gInvoiceLineOnSaveChanges = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        if (grid.select().length == 1 && grid.dataItem(grid.select()).Finalized) {
            notify('You cannot change finalized invoice.', 'error');
            e.preventDefault();
            grid.dataSource.read();
        }
    }

    var gInvoiceLineOnRemove = function (e) {
        var grid = $("#gInvoiceHeader").data("kendoGrid");
        if (grid.select().length == 1 && grid.dataItem(grid.select()).Finalized) {
            notify('You cannot change finalized invoice.', 'error');
            e.preventDefault();
            $("#gInvoiceLine").data("kendoGrid").dataSource.read();
        }
    }

    var gInvoiceHeaderOnDataBound = function (e) {
        var grid = e.sender,
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(0);
        grid.select(row);
    }

</script>