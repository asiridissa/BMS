@using System.Collections
@using BMS.Entity.Enum
@using BMS.Resource
@using Kendo.Mvc.UI

@{
    ViewBag.Title = Resource.Payments;
}

<div class="container-fluid">

    <div id="cheque-row" class="row payment-row" style="display: none;">
        <div class="col-md-12">
            @(Html.Kendo().Grid<BMS.Entity.BMSTenant.Cheque>()
                  .Name("gCheque")
                  .Columns(columns =>
                  {
                      columns.Bound(c => c.Bank).Title(Resource.Bank);
                      columns.Bound(c => c.Branch).Title(Resource.Branch);
                      columns.Bound(c => c.Number).Title(Resource.Number);
                      columns.Bound(c => c.ChequeDate).Title(Resource.Date).Width(100).Format("{0:d}");
                      columns.Bound(c => c.Amount).Title(Resource.Amount).Format("{0:N2}").Width(140);
                      columns.Template(x => { }).ClientTemplate("#=parseFloat(Amount - UtilizedAmount).toFixed(2)#").Title(Resource.Available).Width(140);
                      columns.ForeignKey(x => x.ChequeStatusId, (IEnumerable)ViewData["ChequeStatuses"], "Id", "ShortName").Title(Resource.Status).Width(140).Filterable(true);
                  })
                  .ToolBar(t =>
                      t.Template("<span style=\"float:left;font-size:18px;padding:4px;\">" + Resource.Cheques_of_Customer + "</span>" +
                                 "<button id=\"btnAddCheque\" class=\"k-button k-button-icontext\"><span class=\"k-icon k-add\"></span>" + Resource.Add + " </button>" +
                                 "<button id=\"btnEditCheque\" class=\"k-button k-button-icontext\"><span class=\"k-icon k-i-edit\"></span>" + Resource.Edit + "</button>" +
                                 "<button id=\"btnDeleteCheque\" class=\"k-button k-button-icontext\"><span class=\"k-icon k-i-delete\"></span>" + Resource.Delete + "</button>")
                  ).Pageable()
                  .Navigatable()
                  .Selectable(selectable =>
                  {
                      selectable.Mode(GridSelectionMode.Single);
                      selectable.Type(GridSelectionType.Row);
                  })
                  .Sortable(sortable =>
                  {
                      sortable.SortMode(GridSortMode.MultipleColumn);
                  })
                  .Filterable()
                  .AutoBind(false)
                  .DataSource(dataSource => dataSource
                      .WebApi()
                      .PageSize(5)
                      .Filter(f => f.Add(x => x.ChequeStatusId).IsNotEqualTo((int)ChequeStatusEnum.Bounced))
                      .Model(model => model.Id(p => p.Id))
                      .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Cheques", action = "GetCheques" })).Data("gChequeOnRead"))
                  //.Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Cheques", action = "DeleteCheque", id = "{0}" })))
                  )
                  .Pageable(p => p.Refresh(true))
                  .Events(e => e.DataBound("gChequeOnDataBound"))
            )
        </div>
    </div>
    <div class="row payment-row">
        <div class="col-md-6">
            @(Html.Kendo().Grid<BMS.Entity.BMSTenant.BillHeader>()
                  .Name("gBillHeader")
                  .Columns(columns =>
                  {
                      columns.Bound(c => c.BillNo).Width(120);
                      columns.Bound(c => c.BillingDate).Width(100).Format("{0:d}").Title(Resource.Date);
                      columns.ForeignKey(x => x.CustomerId, (IEnumerable)ViewData["Customers"], "Id", "ShortName").Title(Resource.Customer);
                      columns.Bound(c => c.Amount).Width(100).Format("{0:N2}").HtmlAttributes(new { style = "tex-align:right;" });
                      columns.Bound(c => c.PaidAmount).Width(100).Format("{0:N2}").HtmlAttributes(new { style = "tex-align:right;" }).Title(Resource.Paid);
                  })
                  .ToolBar(t => t.Template("<span style=\"float:left;font-size:18px;padding:4px;\">" + Resource.Billing + "</span>" +
                                           "<input type=\"checkbox\" id=\"showAllBills\" class=\"k-checkbox\">" +
                                           "<label class=\"k-checkbox-label\" style=\"margin: 6px;\" for=\"showAllBills\">" + Resource.Show_All_Bills+"</label>"))
                  .Groupable()
                  .Pageable()
                  .Navigatable()
                  .Selectable(selectable =>
                  {
                      selectable.Mode(GridSelectionMode.Single);
                      selectable.Type(GridSelectionType.Row);
                  })
                  .Sortable(sortable =>
                  {
                      sortable.SortMode(GridSortMode.MultipleColumn);
                  })
                  .Filterable()
                  .DataSource(dataSource => dataSource
                      .WebApi()
                      .Batch(false)
                      .PageSize(10)
                      .Model(model => model.Id(p => p.Id))
                      .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "BillHeaders", action = "GetBillHeaders" })).Data("gBillHeaderData"))
                      .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "BillHeaders", action = "DeleteBillHeader", id = "{0}" })))
                  )
                  .Pageable(p => p.Refresh(true).ButtonCount(5))
                  .Events(e => e.Change("gBillHeaderOnChange").DataBound("gBillHeaderOnDataBound"))
                  )
        </div>
        <div class="col-md-6">
            <div class="payment-row">
                <div class="row">
                    <label class="col-md-4">@Resource.Payment_Methods</label>
                    <div class="col-md-6">
                        @Html.Kendo().RadioButton().Name("paymentType").Label(PaymentTypeEnum.Cash.ToString()).Value((int)PaymentTypeEnum.Cash).Checked(true).HtmlAttributes(new { autofocus = "autofocus" })
                        @Html.Kendo().RadioButton().Name("paymentType").Label(PaymentTypeEnum.Credit.ToString()).Value((int)PaymentTypeEnum.Credit)
                        @Html.Kendo().RadioButton().Name("paymentType").Label(PaymentTypeEnum.Cheque.ToString()).Value((int)PaymentTypeEnum.Cheque)
                    </div>
                </div>
                <div class="row">
                    <label class="col-md-4" for="Payment">@Resource.Payment_Amount</label>
                    <div class="col-md-6">
                        @Html.Kendo().NumericTextBox().Name("Payment").Min(0.01).Placeholder("0.00").Decimals(2).Spinners(false)
                    </div>
                </div>
                <div class="row">
                    <label class="col-md-4" for="PaymentDate">@Resource.Payment_Date</label>
                    <div class="col-md-6">
                        @Html.Kendo().DatePicker().Name("PaymentDate").Value(DateTime.Now.Date.AddDays(-1))
                        <button onclick="pay()" class="k-button k-button-icontext k-grid-edit"><i class="fa fa-money"></i> @Resource.Pay</button>
                    </div>
                </div>
            </div>
            <div>
                @(Html.Kendo().Grid<BMS.Entity.BMSTenant.BillPayment>()
                      .Name("gBillPayment")
                      .Columns(columns =>
                      {
                          columns.ForeignKey(x => x.PaymentMethodId, (IEnumerable)ViewData["PaymentMethods"], "Id", "ShortName").Title(Resource.Payment_Method);
                          columns.Bound(c => c.Amount).Title(Resource.Amount).Format("{0:N2}");
                          columns.Bound(c => c.PaymentDate).Title(Resource.Payment_Date).Width(100).Format("{0:d}");
                          columns.Command(command => { command.Destroy().Text(Resource.Delete); }).Width(100);
                      })
                      .ToolBar(t => t.Template("<span style=\"float:left;font-size:18px;padding:4px;\">" + Resource.Payments + "</span>"))
                      .Pageable()
                      .Filterable()
                      .AutoBind(false)
                      .DataSource(dataSource => dataSource
                          .WebApi()
                          .PageSize(10)
                          .Model(model => model.Id(p => p.Id))
                          .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "BillPayments", action = "GetBillPayments" })).Data("gBillPaymentOnRead"))
                          .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "BillPayments", action = "DeleteBillPayment", id = "{0}" })))
                      )
                      .Pageable(p => p.Refresh(true))
                )
            </div>
        </div>
    </div>
</div>
<script>
    var selectedBillIndex = 0, cheque ={};

    var pay = function() {
        var grid = $('#gBillHeader').data('kendoGrid'),
            payment = $('#Payment').val(),
            date = $('#PaymentDate').val(),
            billId = grid.dataItem(grid.select()).Id,
            billDate = grid.dataItem(grid.select()).BillingDate,
            customerId = grid.dataItem(grid.select()).CustomerId,
            billAmount = grid.dataItem(grid.select()).Amount,
            billPaid = grid.dataItem(grid.select()).PaidAmount,
            creditAmount = billAmount - billPaid,
            paymentType = $('input[type="radio"][name="paymentType"]:checked').val(),
            chequeGrid = $('#gCheque').data('kendoGrid'),
            typeCheque = @((int)PaymentTypeEnum.Cheque);
        if (payment > 0) {
            if (billAmount > billPaid) {
                if (new Date($('#PaymentDate').val()) >= billDate) {
                    if (payment <= creditAmount) {
                        var billPayment = {
                            BillHeaderId: billId,
                            PaymentMethodId: paymentType,
                            Amount: payment,
                            PaymentDate: date
                        };

                        selectedBillIndex = grid.select().closest("tr").index();

                        if (paymentType == typeCheque) {

                            $.post('@Url.HttpRouteUrl("ActionApi", new {controller = "BillPayments", action = "PostBillPayment"})'+
                                '?chequeId='+chequeGrid.dataItem(chequeGrid.select()).Id,
                                    billPayment)
                                .done(function(msg) {
                                    console.log(msg);
                                    notify('Payment Success', 'success');
                                    $('#gBillPayment').data('kendoGrid').dataSource.read();
                                    $('#gBillHeader').data('kendoGrid').dataSource.read();
                                    $('#gCheque').data('kendoGrid').dataSource.read();
                                    $('#Payment').data('kendoNumericTextBox').value("");
                                })
                                .fail(function(msg) {
                                    notify('@Resource.Something_went_wrong', 'warning');
                                    console.log(msg);
                                });
                        } else {
                            $.post('@Url.HttpRouteUrl("ActionApi", new {controller = "BillPayments", action = "PostBillPayment"})',
                                    billPayment)
                                .done(function(msg) {
                                    console.log(msg);
                                    notify('Payment Success', 'success');
                                    $('#gBillPayment').data('kendoGrid').dataSource.read();
                                    $('#gBillHeader').data('kendoGrid').dataSource.read();
                                    $('#gCheque').data('kendoGrid').dataSource.read();
                                    $('#Payment').data('kendoNumericTextBox').value("");
                                })
                                .fail(function(msg) {
                                    notify('@Resource.Something_went_wrong', 'warning');
                                    console.log(msg);
                                });
                        }
                    } else {
                        notify('@Resource.Over_Payment_Detected', 'warning');
                    }
                } else {
                    notify('@Resource.Older_Payment_Date_Detected', 'warning');
                }
            } else {
                notify('@Resource.Already_Paid', 'warning');
            }
        } else {
            notify('@Resource.Enter_Amount_First', 'warning');
        }
    }

    var gChequeOnDataBound = function(e) {
        var grid = e.sender,
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(0);
        grid.select(row);
    }

    var gBillHeaderOnDataBound = function(e) {
        var grid = e.sender,
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(selectedBillIndex);
        grid.select(row);
    }

    var gBillHeaderOnChange = function() {
        $('#gBillPayment').data('kendoGrid').dataSource.read();
        $('#gCheque').data('kendoGrid').dataSource.read();
    }

    var gBillPaymentOnRead = function() {
        var grid = $('#gBillHeader').data('kendoGrid');
        return { headerId: grid.dataItem(grid.select()).Id };
    }

    var gChequeOnRead = function() {
        var grid = $('#gBillHeader').data('kendoGrid');
        return { customerId: grid.dataItem(grid.select()).CustomerId };
    }

    var paymentTypeChage = function(e) {
        var cheque = @((int) PaymentTypeEnum.Cheque);
        if (e == cheque) {
            $('#cheque-row').show();
        } else {
            $('#cheque-row').hide();
        }
    }

    var addCheque = function() {
        var grid = $('#gBillHeader').data('kendoGrid');
        $('#wCheque').html('');
        $('#wCheque')
            .data("kendoWindow")
            .refresh({
                url: '@Url.Action("_Cheque", "Cheque")/0',
                data: { customerId: grid.dataItem(grid.select()).CustomerId }
            })
            .open();
    }

    var editCheque = function() {
        var gridBill = $('#gBillHeader').data('kendoGrid');
        var gridCheque = $('#gCheque').data('kendoGrid');
        $('#wCheque').html('');
        $('#wCheque')
            .data("kendoWindow")
            .refresh({
                url: '@Url.Action("_Cheque", "Cheque")/' + gridCheque.dataItem(gridCheque.select()).Id,
                data: { customerId: gridBill.dataItem(gridBill.select()).CustomerId }
            })
            .open();
    }

    var validateCheque = function() {
        return cheque.Bank != "" && cheque.Branch != "" && cheque.Number != "" && cheque.Amount > 0;
    }

    var collectChequeData = function() {
        cheque = {
            Id: $('#ChequeId').val(),
            Bank: $('#Bank').val(),
            Branch: $('#Branch').val(),
            Number: $('#Number').val(),
            Amount: $('#Amount').data('kendoNumericTextBox').value(),
            ChequeDate: $('#ChequeDate').val(),
            CustomerId: $('#CustomerId').val(),
            ChequeStatusId: $('#ChequeStatusId').data('kendoDropDownList').value()
        };
    }

    var saveCheque = function() {
        collectChequeData();
        if (validateCheque()) {
            if (cheque.Id == 0) {
                $.post('@Url.HttpRouteUrl("ActionApi", new {controller = "Cheques", action = "PostCheque"})', cheque)
                    .done(function(msg) {
                        console.log(msg);
                        notify('@Resource.Successfully_Saved', 'success');
                        $('#gCheque').data('kendoGrid').dataSource.read();
                        $('#wCheque').data('kendoWindow').close().refresh();
                    })
                    .fail(function(msg) {
                        notify('@Resource.Something_went_wrong', 'warning');
                        console.log(msg);
                    });
            } else if (cheque.Id > 0) {
                $.ajax({
                    url: '@Url.HttpRouteUrl("ActionApi", new {controller = "Cheques", action = "PutCheque"})',
                    method: 'PUT',
                    data: cheque
                })
                    .done(function(msg) {
                        console.log(msg);
                        notify('@Resource.Successfully_Saved', 'success');
                        $('#gCheque').data('kendoGrid').dataSource.read();
                        $('#wCheque').data('kendoWindow').close().refresh();
                    })
                    .fail(function(msg) {
                        notify('@Resource.Something_went_wrong', 'warning');
                        console.log(msg);
                    });
            }
        } else {
            notify('@Resource.Please_fill_the_missing_Data', 'error');
        }
    };

    var deleteCheque = function() {
        var r = confirm('@Resource.Confirm_to_delete_this_cheque.\n @Resource.All_the_transactions_will_be_reversed.');
        if (r) {
            var gridCheque = $('#gCheque').data('kendoGrid');
            $.ajax({
                    url: '@(Url.HttpRouteUrl("ActionApi", new {controller = "Cheques", action = "DeleteCheque"}))/' +
                        gridCheque.dataItem(gridCheque.select()).id,
                    method: 'DELETE'
                })
                .done(function(msg) {
                    console.log(msg);
                    notify('@Resource.Successfully_Deleted', 'success');
                    $('#gCheque').data('kendoGrid').dataSource.read();
                    $('#wCheque').data('kendoWindow').close().refresh();
                })
                .fail(function(msg) {
                    notify('@Resource.Something_went_wrong', 'warning');
                    console.log(msg);
                });
        }
    }

    var gChequeOnRequestEnd = function(e) {
        console.log(e);
    }

    var gBillHeaderData = function(e) {
        return {
            showAllBills: $('#showAllBills').is(':checked')
        }
    }

    $(document)
        .ready(function() {
            $('input[type="radio"][name="paymentType"]')
                .change(function() {
                    paymentTypeChage(this.value);
                });

            $('#showAllBills')
                .change(function () {
                    $('#gBillHeader').data('kendoGrid').dataSource.read();
                });

            $('body').on('click', '#btnAddCheque', addCheque);
            $('body').on('click', '#btnEditCheque', editCheque);
            $('body').on('click', '#btnSaveCheque', saveCheque);
            $('body').on('click', '#btnDeleteCheque', deleteCheque);

        });
</script>

@(Html.Kendo().Window()
      .Name("wCheque")
      .Width(800)
      .Height(180)
      .Visible(false)
      .Modal(true)
      .Draggable()
      .Position(p => p.Top(10))
      .AutoFocus(true)
      .Title("Cheque")
      .Actions(actions => actions.Refresh().Minimize().Maximize().Close())
      .LoadContentFrom("_Cheque", "Cheque", new { id = 0, customerId = 0 })
      .Events(e => e.Open("function(e){e.sender.center();}"))
)