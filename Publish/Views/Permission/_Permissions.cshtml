@using BMS.Entity.BMSMaster
@using BMS.Resource
@(Html.Kendo().Grid<Permission>()
      .Name("gPermission")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id).ClientTemplate("<input data-id=\"permission-#=Id#\" type=\"checkbox\"/ value=\"#=Id#\">").Width(20).Filterable(false).Title("");
          columns.Bound(c => c.Name).ClientTemplate("#=Id#) <i class=\"fa fa-#=fa_Class#\"></i>  #=Name#");
          columns.Command(command => { command.Destroy().Text(Resource.Delete); }).Width(100);
      })
      //.ToolBar(toolbar =>
      //{
      //    toolbar.Custom().Text("Allow").Name("allow-permission");
      //    toolbar.Custom().Text("Deny").Name("deny-permission");
      //    toolbar.Create().Text(Resource.Add);
      //    toolbar.Save().SaveText(Resource.Save).CancelText(Resource.Cancel);
      //})
      .ToolBar(t => t.Template(@<text>
                                   <span style="float: left">
                                       <button class="k-button k-button-icontext" id="allow-permission"><span class="k-icon k-i-link-horizontal"></span>Allow</button>
                                       <button class="k-button k-button-icontext" id="deny-permission"><span class="k-icon k-i-unlink-horizontal"></span>Deny</button>
                                   </span>
                                   <a class="k-button k-button-icontext k-grid-add" href="/data/Permissions/GetPermissions"><span class="k-icon k-i-add"></span>Add</a>
                                   <a class="k-button k-button-icontext k-grid-save-changes" href="javascript:void(0)"><span class="k-icon k-i-check"></span>Save</a>
                                   <a class="k-button k-button-icontext k-grid-cancel-changes" href="javascript:void(0)"><span class="k-icon k-i-cancel"></span>Cancel</a>
                                </text>))
      .Editable(editable => editable.Mode(GridEditMode.InCell))
      .Pageable()
      .Navigatable()
      .Selectable(selectable =>
      {
          selectable.Mode(GridSelectionMode.Single);
          selectable.Type(GridSelectionType.Row);
      })
      .Sortable(sortable =>
      {
          sortable.SortMode(GridSortMode.MultipleColumn);
      })
      .Filterable()
      .DataSource(dataSource => dataSource
          .WebApi()
          .PageSize(10)
          .Model(model =>
          {
              model.Id(p => p.Id);
              model.Field(x => x.Id).Editable(false);
              model.Field(x => x.fa_Class).Editable(false);
          })
          .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Permissions", action = "GetPermissions" })))
          .Create(create => create.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Permissions", action = "PostPermission" })))
          .Update(update => update.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Permissions", action = "PutPermission", id = "{0}" })))
          .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Permissions", action = "DeletePermission", id = "{0}" })))
      )
      .Pageable(p => p.Refresh(true))
)
