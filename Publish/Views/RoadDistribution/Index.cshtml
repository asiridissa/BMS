@using System.Collections
@using BMS.Resource
@{
    ViewBag.Title = "Road Distribution";
}
<div class="alert alert-info" role="alert">
    <div style="float: left">
        <label>Date</label>
        @Html.Kendo().DatePicker().Name("dpDate").Value(DateTime.Today).Events(e => e.Change("gRoadDistributionRead"))
        <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
        <label>Vehicle</label>
        @(Html.Kendo().DropDownList().Name("ddVehicle")
              .DataValueField("Id")
              .DataTextField("No")
              .DataSource(s => s
                  .Read(r =>
                  {
                      r.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Vehicles", action = "GetAll" }));
                  }))
              .Events(e => e.DataBound("gRoadDistributionRead").Change("gRoadDistributionRead"))
        )
    </div>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <strong>To be Finalized : </strong>
    <span id="to-be-finalized"></span>
    <span style="float: right">
        <strong>Last Finalized on : </strong>
        <span id="last-finalized"></span>
    </span>
</div>

@(Html.Kendo().Grid<BMS.Entity.BMSTenant.RoadDistribution>()
                                              .Name("gRoadDistribution")
                                              .Columns(columns =>
                                              {
                                                  columns.Bound(x => x.Id).Hidden(true);
                                                  columns.Bound(x => x.UnitsPerCase).Hidden(true);
                                                  columns.Bound(x => x.StockQuantity).ClientTemplate("#=warnStock(UnitsPerCase,LoadingCase,LoadingPiece,StockQuantity)#").Title("Stock").HtmlAttributes(new { @class = "number" });
                                                  columns.ForeignKey(c => c.ItemId, (IEnumerable)ViewData["Items"], "Id", "Value").Title("Item").HtmlAttributes(new { data_nostock = "#=StockQuantity#", data_nofreestock = "#=StockFreeQuantity#" });
                                                  columns.Bound(c => c.UnitsPerCase).Width(60).Title("UPC").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.BalanceStockCase).Width(60).Title("BSC").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.BalanceStockPiece).Width(60).Title("BSP").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.BalanceStockQuantity).Width(60).Title("BSQ").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.LoadingCase).Width(60).Title("LDC").EditorTemplateName("PossitiveInteger").HtmlAttributes(new { @class = "number strong" });
                                                  columns.Bound(c => c.LoadingPiece).Width(60).Title("LDP").EditorTemplateName("PossitiveInteger").HtmlAttributes(new { @class = "number strong" });
                                                  columns.Bound(c => c.LoadingQuantity).Width(60).Title("LDQ").ClientTemplate("#=getQty(LoadingCase,LoadingPiece,UnitsPerCase)#").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.UnloadingCase).Width(60).Title("ULC").EditorTemplateName("PossitiveInteger").HtmlAttributes(new { @class = "number strong" });
                                                  columns.Bound(c => c.UnloadingPiece).Width(60).Title("ULP").EditorTemplateName("PossitiveInteger").HtmlAttributes(new { @class = "number strong" });
                                                  columns.Bound(c => c.UnloadingQuantity).Width(60).Title("ULQ").ClientTemplate("#=getQty(UnloadingCase,UnloadingPiece,UnitsPerCase)#").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.RoadDistributionQuantity).Width(60).Title("RDQ").ClientTemplate("#=getRDQty(BalanceStockQuantity,UnitsPerCase,LoadingCase,LoadingPiece,UnloadingCase,UnloadingPiece)#")
                                                  .HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.BillingQuantity).Width(60).Title("Bil").HtmlAttributes(new { @class = "number" });
                                                  columns.Bound(c => c.Varience).Width(60).ClientTemplate("#=getVar(BalanceStockQuantity,UnitsPerCase,LoadingCase,LoadingPiece,UnloadingCase,UnloadingPiece,BillingQuantity)#").Title("Var")
                                                  .HtmlAttributes(new { @class = "number" });
                                              })
                                              .ToolBar(toolbar =>
                                              {
                                                  toolbar.Template(@<text>
                                                                       <span style="float: left; font-size: 18px; padding: 4px;">Loading Unloading</span>
                                                                       <button id="print-roadDistribution" class="k-button" style="float: right;"><i class="fa fa-print"></i>Print</button>
                                                                       <a class="k-button k-button-icontext k-grid-Finalize" href="javascript:finalize()"><i class="fa fa-thumbs-o-up"></i>Finalize</a>
                                                                       <div id="finalized" style="display: none;">
                                                                           <i class="fa fa-thumbs-up"></i>Finalized
                                                                       </div>
                                                                    </text>);
                                              })
                                              .Editable(editable => editable.Mode(GridEditMode.InCell))
                                              .Pageable()
                                              .Navigatable()
                                              .Sortable(sortable =>
                                              {
                                                  sortable.SortMode(GridSortMode.MultipleColumn);
                                              })
                                              .AutoBind(false)
                                              .DataSource(dataSource => dataSource
                                                  .WebApi()
                                                  .PageSize(Int32.MaxValue)
                                                  .AutoSync(true)
                                                  .Model(model =>
                                                  {
                                                      model.Id(p => p.Id);
                                                      model.Field(x => x.StockQuantity).Editable(false);
                                                      model.Field(x => x.ItemId).Editable(false);
                                                      model.Field(x => x.UnitsPerCase).Editable(false);
                                                      model.Field(x => x.BalanceStockCase).Editable(false);
                                                      model.Field(x => x.BalanceStockPiece).Editable(false);
                                                      model.Field(x => x.BalanceStockQuantity).Editable(false);
                                                      model.Field(x => x.LoadingQuantity).Editable(false);
                                                      model.Field(x => x.UnloadingQuantity).Editable(false);
                                                      model.Field(x => x.RoadDistributionQuantity).Editable(false);
                                                      model.Field(x => x.BillingQuantity).Editable(false);
                                                      model.Field(x => x.Varience).Editable(false);
                                                  })
                                                  .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "RoadDistributions", action = "GetRoadDistributions" })).Data("gRoadDistributionReadData"))
                                                  .Update(update => update.Url(Url.HttpRouteUrl("ActionApi", new { controller = "RoadDistributions", action = "PutRoadDistributions", id = "{0}" })))
                                              //.Events(e=>e.Change("gRoadDistributionOnChange"))
                                              )
                                              .Pageable(x => x.Refresh(true).PageSizes(new[] { 20, 50, 100, 200 }))
                                              .Events(e => e.DataBound("gRoadDistributionOnDataBound")
                                              .Save("save")
)
)
<script>
    //Cell coordinates of first editable
    var lastEditIndex = { row: 0, col: 7 };
    var finalized = false;

    var getQty = function (LoadingCase, LoadingPiece, UnitsPerCase) {
        return LoadingCase * UnitsPerCase + LoadingPiece;
    }

    var getRDQty = function (BalanceStockQuantity, UnitsPerCase, LoadingCase, LoadingPiece, UnloadingCase, UnloadingPiece) {
        return BalanceStockQuantity + getQty(LoadingCase, LoadingPiece, UnitsPerCase) - getQty(UnloadingCase, UnloadingPiece, UnitsPerCase);
    }

    var warnStock = function (UnitsPerCase, LoadingCase, LoadingPiece, StockQuantity) {
        if (getQty(LoadingCase, LoadingPiece, UnitsPerCase ) <= StockQuantity) {
            return StockQuantity + " <span class=\"k-icon k-i-heart-outline stock-health-good\"></span>";
        } else {
            return StockQuantity + " <span class=\"k-icon k-i-heart stock-health-bad blink_me\"></span>";
        }
    }

    var getVar = function (BalanceStockQuantity, UnitsPerCase, LoadingCase, LoadingPiece, UnloadingCase, UnloadingPiece, BillingQuantity) {
        var variance = BillingQuantity - getRDQty(BalanceStockQuantity, UnitsPerCase, LoadingCase, LoadingPiece, UnloadingCase, UnloadingPiece);
        switch (true) {
            case variance > 0:
                return "<span class=\"excess-var\">" + variance + "</span>";
            case variance < 0:
                return "<span class=\"short-var\">" + variance + "</span>";
            default:
                return variance;
        }
    }

    //focus to next cell after save
    var dataBound = function (e) {
        if (!$.isEmptyObject(lastEditIndex)) {

            var cell = e.sender.tbody.children().eq(lastEditIndex.row).children().eq(lastEditIndex.col + 1);

            e.sender.current(cell);
            e.sender.table.focus();
            $(cell).trigger('click');
        }
        lastEditIndex = { row: 0, col: 7 };
    }

    //get the coordinates of saved cell
    var save = function (e) {
        lastEditIndex.row = e.sender.tbody.children().index(e.container.parent());
        lastEditIndex.col = e.container.parent().children().index(e.container);
    }

    var toBeFinalized = function () {
        $.post('@Url.HttpRouteUrl("ActionApi", new { action = "ToBeFinalized", controller = "RoadDistributions" })?vehicleId=' + $('#ddVehicle').data('kendoDropDownList').value())
            .done(function (msg) {
                console.log(msg);
                var dates = "";
                for (var i in msg) {
                    if (dates != "") {
                        dates += ', ';
                    }
                    dates += kendo.toString(new Date(msg[i]), 'd');
                }
                $('#to-be-finalized').html(dates);
            });
    }

    var lastFinalized = function () {
        $.post('@Url.HttpRouteUrl("ActionApi", new { action = "LastFinalized", controller = "RoadDistributions" })?vehicleId=' + $('#ddVehicle').data('kendoDropDownList').value())
            .done(function (msg) {
                $('#last-finalized').html(kendo.toString(new Date(msg), 'd'));
            });
    }


    var gRoadDistributionOnDataBound = function (e) {
        if (e.sender.dataItems().length > 0) {
            finalized = e.sender.dataItems()[0].FinalizedUserId != null;
            if (finalized) {
                $('.stock-health-good, .stock-health-bad, .k-grid-Finalize').hide();
                $('#finalized').show();
                notify('Finalized on ' + kendo.toString(e.sender.dataItems()[0].FinalizedDateTime, 'g'), 'info');
            } else {
                $('.stock-health-good, .stock-health-bad ,.k-grid-Finalize').show();
                $('#finalized').hide();
                //indicate stock warning
                if ($('.stock-health-bad').length > 0) {
                    notify('There is/are ' + $('.stock-health-bad').length + ' Item(s) with Stock shortage to finalize.<br/>' +
                        'Please check for <span class="k-icon k-i-heart blink_me" style="color:red;"></span> indicator.', 'warning');
                }
            }
            toBeFinalized();
            lastFinalized();
            dataBound(e);
        } else {
            notify('There are no Balance Stock or Bills for <b>' +
                $('#ddVehicle').data('kendoDropDownList').text() +
                '</b> on <b>' +
                $('#dpDate').data('kendoDatePicker').value().toLocaleDateString() + '<b>',
                'info');
        }
    }

    var gRoadDistributionReadData = function (e) {
        var vehicle = $('#ddVehicle').data('kendoDropDownList');
        var date = $('#dpDate').data('kendoDatePicker');
        return {
            vehicleId: vehicle.value(),
            date: date.value()
        }
    }

    var gRoadDistributionRead = function (e) {
        var grid = $('#gRoadDistribution').data('kendoGrid');
        grid.dataSource.read();
    }

    var finalize = function () {
        var r = confirm("Confirm to finalize?");
        if (r) {
            $.post('@Url.HttpRouteUrl("ActionApi",new {action="CheckUnFinalized",controller="RoadDistributions"})?date=' + $('#dpDate').val() + '&vehicleId=' + $('#ddVehicle').data('kendoDropDownList').value())
                .done(function (msg) {
                    if (!msg) {
                        $.post('@Url.HttpRouteUrl("ActionApi",new {action="Finalize",controller="RoadDistributions"})?date=' + $('#dpDate').val() + '&vehicleId=' + $('#ddVehicle').data('kendoDropDownList').value())
                            .done(function (msg) {
                                if (msg) {
                                    gRoadDistributionRead();
                                    notify('Save Successful', 'success');
                                } else {
                                    notify('@Resource.Something_went_wrong. <br/>Please check for <span class="k-icon k-i-heart blink_me" style="color:red;"></span> indicator.', 'warning');
                                };
                            });
                    } else {
                        notify('There are previous days to be finalized', 'warning');
                    }
                });

        }
    }

    $(document).ready(function() {
        $('#print-roadDistribution').bind('click',
            function() {
                window.open('@Url.Action("RoadDistributionPrint","Report")?date=' +
                    $('#dpDate').data('kendoDatePicker').value().toLocaleDateString() +
                    '&vehiceId=' +
                    $('#ddVehicle').data('kendoDropDownList').value() +
                    '&print=true',
                    '_blank');
            });
    });

</script>