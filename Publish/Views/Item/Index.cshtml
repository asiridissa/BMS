@using System.Collections

@(Html.Kendo().Grid<BMS.Entity.BMSTenant.Item>()
      .Name("gItem")
      .Columns(columns =>
      {
          columns.ForeignKey(c => c.BrandId, (IEnumerable)ViewData["Brands"], "Id", "ShortName").Title("Brand").Width(120);
          columns.ForeignKey(c => c.CategoryId, (IEnumerable)ViewData["Categories"], "Id", "ShortName").Title("Category").Width(120);
          columns.ForeignKey(c => c.ProductId, (IEnumerable)ViewData["Products"], "Id", "ShortName").Title("Product");
          columns.Bound(c => c.UOMValue).Format("{0:N3}").EditorTemplateName("UOMValue").Title("Value").Width(100).HtmlAttributes(new {style="text-align:right;"});
          columns.ForeignKey(c => c.UOMId, (IEnumerable)ViewData["UnitOfMeasures"], "Id", "ShortName").Title("UOM").Width(60);
          columns.Bound(c => c.UnitsPerCase).EditorTemplateName("PossitiveInteger").Title("UPC").Width(60).HtmlAttributes(new { style = "text-align:right;" });
          columns.Bound(c => c.PurchasePrice).Format("{0:N2}").EditorTemplateName("Currency").Title("Purch Pr").Width(100).HtmlAttributes(new { style = "text-align:right;" });
          columns.Bound(c => c.SalesPrice).Format("{0:N2}").EditorTemplateName("Currency").Title("Sale Pr").Width(100).HtmlAttributes(new { style = "text-align:right;" });
          columns.Bound(c => c.WholesalePrice).Format("{0:N2}").EditorTemplateName("Currency").Title("Wh Sale").Width(100).HtmlAttributes(new { style = "text-align:right;" });
          columns.Command(command => { command.Destroy(); }).HtmlAttributes(new {style="text-align:center;width:80px;"});
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create();
          toolbar.Save();
      })
      .Editable(editable => editable.Mode(GridEditMode.InCell))
      .Pageable()
      .Navigatable()
      .Selectable(selectable =>
      {
          selectable.Mode(GridSelectionMode.Single);
          selectable.Type(GridSelectionType.Row);
      })
      .Sortable(sortable =>
      {
          sortable.SortMode(GridSortMode.MultipleColumn);
      })
      .Filterable(f => f.Mode(GridFilterMode.Menu))
      .DataSource(dataSource => dataSource
          .WebApi()
          .Batch(false)
          .PageSize(15)
          .Model(model =>
          {
              model.Id(p => p.Id);
              model.Field(x => x.BrandId);
              model.Field(x => x.CategoryId);
              model.Field(x => x.ProductId);
              model.Field(x => x.UOMValue);
              model.Field(x => x.UOMId);
              model.Field(x => x.UnitsPerCase);
              model.Field(x => x.PurchasePrice);
              model.Field(x => x.SalesPrice);
              model.Field(x => x.WholesalePrice);
              model.Field(x => x.EffectiveDate);
              model.Field(x => x.ExpireDate);
          })
          .Read(read => read.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Items" ,action="GetItems" })))
          .Create(create => create.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Items", action = "PostItem" })))
          .Update(update => update.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Items", action = "PutItem", id = "{0}" })))
          .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Items", action = "DeleteItem", id = "{0}" })))
      )
      .Pageable(p => p.Refresh(true).PageSizes(true)))

