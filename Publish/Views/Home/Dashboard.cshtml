@using BMS.Entity
@using BMS.Entity.BMSMaster
@using BMS.Entity.BMSTenant

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Content/highcharts/highcharts.js"></script>
<script src="~/Content/highcharts/highcharts-more.js"></script>
<script src="~/Content/highcharts/modules/exporting.js"></script>
<script src="~/Scripts/jquery.animateNumber.min.js"></script>

<div class="">
    <label>From </label>
    @Html.Kendo().DatePicker().Name("dtFrom").Value(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).Events(e => e.Change("refreshDashboard")).Max(DateTime.Today)
    <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <label>To </label>
    @Html.Kendo().DatePicker().Name("dtTo").Value(DateTime.Now).Events(e => e.Change("refreshDashboard")).Max(DateTime.Today)
</div>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="dashboard-widjet" id="Accum-amounts"><center><i class="fas fa-cog faa-spin animated"></i> Working...</center></div>
        </div>
        <div class="col-md-12">
            <div id="Cheques" class="dashboard-widjet">
                <h4>Pending Cheques</h4>
                @(Html.Kendo().Grid<sp_ChequeDashboard_Result>()
                                                      .Name("gCheques")
                                                      .Columns(c =>
                                                      {
                                                          c.Bound(x => x.Number).ClientTemplate("#if(Status=='late'){#" +
                                                                                                "<i class='fa fa-exclamation-triangle blink_me red left-float' title='Late'></i>" +
                                                                                                "#}else if(Status=='today'){#" +
                                                                                                "<i class='fa fa-bell-o faa-ring animated orange left-float' title='Today'></i>" +
                                                                                                "#}#" +
                                                                                                "&nbsp;#=Number#").HtmlAttributes(new { @class = "number" });
                                                          c.Bound(x => x.ChequeDate).Format("{0:d}").Title("Date").HtmlAttributes(new { @class = "number" });
                                                          c.Bound(x => x.Amount).Format("{0:N2}").HtmlAttributes(new { @class = "number" });
                                                          c.Bound(x => x.Bank);
                                                          c.Bound(x => x.Branch);
                                                          c.Bound(x => x.Customer);
                                                      })
                              .Filterable()
                                                      .DataSource(s =>
                                                      {
                                                          s.WebApi()
                                                              .ServerOperation(false)
                                                              .PageSize(10)
                                                              .Read(r => r.Url(Url.HttpRouteUrl("ActionApi", new { controller = "Dashboards", action = "GetChequeDashboard" })));
                                                      })
                                                      .Pageable(p => p.Refresh(true).PageSizes(new[] { 10, 20, 50, 100 }))
                )
            </div>
        </div>

        <div class="col-md-6">
            <div class="dashboard-widjet">
                <div id="Sales-amount"><center><i class="fas fa-cog faa-spin animated"></i> Working...</center></div>
            </div>
            <div id="Wasted-qty" class="dashboard-widjet"><center><i class="fas fa-cog faa-spin animated"></i> Working...</center></div>
        </div>
        <div id="col2" class="col-md-6">
            <div id="Sales-qty" class="dashboard-widjet"><center><i class="fas fa-cog faa-spin animated"></i> Working...</center></div>
            <div id="SalesDetails-amount" class="dashboard-widjet"><center><i class="fas fa-cog faa-spin animated"></i> Working...</center></div>
        </div>
    </div>
</div>

<script>
    var date1, date2, day, between, series = [];

    var refreshDashboard = function () {
        working();
        $.ajax({
            url: '@Url.HttpRouteUrl("ActionApi", new {controller="Dashboards", action="GetSalesDashboard"})?from='
                + $('#dtFrom').val()
                + '&to='
                + $('#dtTo').val(),
            type: 'GET',
            async: true,
            dataType: "json",
            success: function (data) {
                generateSeies(data);
                renderCharts(data);
                working(false);
            }
        });
    };

    var generateSeies = function (data) {
        //Full Date Range
        date1 = new Date($('#dtFrom').val());
        date2 = new Date($('#dtTo').val());
        //between = [Highcharts.dateFormat('%m-%d-%Y',new Date($('#dtFrom').val()))];
        between = [new Date($('#dtFrom').val()).toLocaleDateString()];
        while (date2 > date1) {
            day = date1.getDate();
            between.push(date1.toLocaleDateString());
            date1 = new Date(date1.setDate(++day));
        }
        between.push(date2.toLocaleDateString());
        between.shift();

        //Create Series
        series = []; var categories = [];
        categories = between;
        series.push({ name: "Sales", data: [], color: 'rgb(144, 237, 125)' });
        series.push({ name: "Paid", data: [], color: 'rgb(124, 181, 236)' });
        series.push({ name: "Sales", data: [], color: 'rgb(144, 237, 125)' });
        series.push({ name: "Free", data: [], color: 'rgb(124, 181, 236)' });
        series.push({ name: "Damage", data: [], color: 'rgb(92, 92, 97)' });
        series.push({ name: "Expire", data: [], color: 'rgb(255, 188, 117)' });
        series.push({ name: "Collection", data: [], color: 'rgb(144, 237, 125)' });
        series.push({ name: "Deduction", data: [], color: 'rgb(124, 181, 236)' });
        series.push({ name: "Sales", data: []});
        series.push({ name: "Free Issue", data: []});
        series.push({ name: "Expire", data: []});
        series.push({ name: "Damage", data: []});
        series.push({ name: "Good Return", data: []});

        var sumSales = 0, sumPaid = 0, sumSalesQty = 0, sumFree = 0, sumCollection = 0, sumDeduction=0, sumExpire = 0, sumDamage = 0, sumGR =0;
        $.each(categories,
            function (i, e) {
                between[i] = kendo.toString(new Date(e), "MMM dd");
                var valSales = 0;
                var valPaid = 0;
                var valCollection = 0;
                var valDiduction = 0;
                var valSaleQty = 0;
                var valFree = 0;
                var valExpire = 0;
                var valDamage = 0;
                var valGR = 0;
                $.each(data,
                    function (i1, e1) {
                        var match = new Date(e1.BillingDate).getDate() === new Date(e).getDate() &&
                            new Date(e1.BillingDate).getMonth() === new Date(e).getMonth() &&
                            new Date(e1.BillingDate).getYear() === new Date(e).getYear();
                        if (match) {
                            valSales = e1.Sale;
                            valPaid = e1.Paid;
                            valCollection = e1.Collection;
                            valDiduction = e1.Diduction + e1.Discount;
                            valSaleQty = e1.SaleQty;
                            valFree = e1.Free;
                            valExpire = e1.Expire;
                            valDamage = e1.Damage;
                            valGR = e1.valGR;
                        }
                    });
                series[0].data.push(valSales);
                series[1].data.push(valPaid);
                series[2].data.push(valSaleQty);
                series[3].data.push(valFree);
                series[4].data.push(valDamage);
                series[5].data.push(valExpire);
                series[6].data.push(valCollection);
                series[7].data.push(valDiduction);
                sumSales += valSales;
                sumPaid += valPaid;
                sumSalesQty += valSaleQty;
                series[8].data.push(sumSalesQty);
                sumFree += valFree;
                series[9].data.push(sumFree);
                sumExpire += valExpire;
                series[10].data.push(sumExpire);
                sumDamage += valDamage;
                series[11].data.push(sumDamage);
                sumGR += valGR;
                series[12].data.push(sumGR);
                sumCollection += valCollection;
                sumDeduction += valDiduction;
            });

        series.push({
            type: "pie",
            data: [
                { name: 'Sales', y: sumSales, color: 'rgb(144, 237, 125)' },
                { name: 'Paid', y: sumPaid, color: 'rgb(124, 181, 236)' }
            ],
            center: [50, 0],
            size: 50,
            dataLabels: { enabled: false },
            tooltip: { pointFormat: '{point.y:.2f} / {point.percentage:.1f} %', headerFormat:'<b>{point.key}</b><br/>' }
        });
        series.push({
            type: "pie",
            data: [
                { name: 'Sales', y: sumSalesQty, color: 'rgb(144, 237, 125)' },
                { name: 'Free', y: sumFree, color: 'rgb(124, 181, 236)' }
            ],
            center: [50, 0],
            size: 50,
            dataLabels: { enabled: false },
            tooltip: { pointFormat: '{point.y} / {point.percentage:.1f} %', headerFormat: '<b>{point.key}</b><br/>' }
        });
        series.push({
            type: "pie",
            data: [
                { name: 'Payment', y: sumCollection, color: 'rgb(144, 237, 125)' },
                { name: 'Deduction', y: sumDeduction, color: 'rgb(124, 181, 236)' }
            ],
            center: [50, 0],
            size: 50,
            dataLabels: { enabled: false },
            tooltip: { pointFormat: '{point.y:.2f} / {point.percentage:.1f} %', headerFormat: '<b>{point.key}</b><br/>' }
        });


        console.log(categories, between, series);
    }

    var renderCharts = function (data) {
        Highcharts.chart('Accum-amounts', {
            chart: { type: 'line', zoomType: 'xy', panning: true, panKey: 'shift' },
            title: { text: 'Amounts Accumulative' },
            xAxis: { categories: between },
            yAxis: { title: { text: 'Amount (Rs)' } },
            tooltip: { shared: true, pointFormat: '{series.name}: <b>{point.y:,.2f}</b><br/>' },
            data: data,
            series: [series[8], series[9], series[10], series[11], series[12]]
        });

        Highcharts.chart('Sales-amount', {
            chart: { type: 'area', zoomType: 'xy', panning: true, panKey: 'shift' },
            title: { text: 'Sales' },
            subtitle: { text: 'Sales amounts over the period' },
            xAxis: { categories: between },
            yAxis: { title: { text: 'Amount (Rs)' } },
            tooltip: { shared: true, pointFormat: '{series.name}: <b>{point.y:.2f}</b><br/>' },
            data: data,
            series: [series[0], series[1], series[13]]
        });

        Highcharts.chart('Sales-qty', {
            chart: { type: 'area', zoomType: 'xy', panning: true, panKey: 'shift' },
            title: { text: 'Billing' },
            subtitle: { text: 'Billing quantities over the period' },
            xAxis: { categories: between },
            yAxis: { title: { text: 'Quanty (Pieces)' } },
            tooltip: { shared: true },
            data: data,
            series: [series[2], series[3],series[14]]
        });

        Highcharts.chart('SalesDetails-amount', {
            chart: { type: 'area', zoomType: 'xy', panning: true, panKey: 'shift' },
            title: { text: 'Payments/Deduction' },
            subtitle: { text: 'Amounts over the period per bills' },
            xAxis: { categories: between },
            yAxis: { title: { text: 'Amount (Rs)' } },
            tooltip: { shared: true, pointFormat: '{series.name}: <b>{point.y:.2f}</b><br/>' },
            data: data,
            series: [series[6], series[7], series[15]]
        });

        Highcharts.chart('Wasted-qty', {
            chart: { type: 'area', zoomType: 'xy',panning: true,panKey: 'shift' },
            title: { text: 'Expiery/Damage' },
            subtitle: { text: 'Expiery/Damage quantities over the period' },
            xAxis: { categories: between },
            yAxis: { title: { text: 'Quanty (Pieces)' } },
            tooltip: { shared: true },
            data: data,
            series: [series[5],series[4]]
        });
    };

    var countTo = function (id, value, miliSeconds) {
        var step = value / miliSeconds;
        var left = millisecond;
        var int = setInterval(function () {
            $(id).html(step + step);
            if (left <= 0) {
                $(id).html(value);
                clearInterval(int);
            }
        }, 1);
    }

    $(document).ready(function () {
        Highcharts.setOptions({
            lang: {
                thousandsSep: ','
            }
        });
        refreshDashboard();
    });
</script>
